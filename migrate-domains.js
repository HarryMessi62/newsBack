const mongoose = require('mongoose');
require('dotenv').config({ path: './config.env' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const Article = require('./models/Article');

async function migrateDomains() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ–º–µ–Ω–æ–≤...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –≥–¥–µ domain –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    const articlesToMigrate = await Article.find({
      $or: [
        { domain: { $type: 'objectId' } },  // ObjectId
        { domain: { $type: 'string' } }     // String
      ]
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${articlesToMigrate.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
    
    let migratedCount = 0;
    
    for (const article of articlesToMigrate) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω
        const currentDomain = article.domain;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        const newDomainArray = Array.isArray(currentDomain) ? currentDomain : [currentDomain];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await Article.updateOne(
          { _id: article._id },
          { $set: { domain: newDomainArray } }
        );
        
        migratedCount++;
        console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: ${article.title} (ID: ${article._id})`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ ${article._id}:`, error);
      }
    }
    
    console.log(`üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${migratedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalArticles = await Article.countDocuments();
    const arrayDomainArticles = await Article.countDocuments({
      domain: { $type: 'array' }
    });
    
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}`);
    console.log(`   –°—Ç–∞—Ç–µ–π —Å –º–∞—Å—Å–∏–≤–æ–º –¥–æ–º–µ–Ω–æ–≤: ${arrayDomainArticles}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateDomains(); 