const mongoose = require('mongoose');
const Article = require('./models/Article');
const User = require('./models/User');
const Domain = require('./models/Domain');

async function diagnoseContentIssues() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç–∞—Ç–µ–π...\n');
  
  try {
    await mongoose.connect('mongodb://localhost:27017/backnews');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç–∞—Ç–µ–π
    const articles = await Article.find({})
      .sort({ createdAt: -1 })
      .limit(50)
      .populate('author', 'username')
      .populate('domain', 'name');

    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${articles.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π...\n`);

    let issues = {
      duplicateImages: [],
      shortContent: [],
      noImages: [],
      duplicateTitles: [],
      badContent: [],
      statistics: {
        totalArticles: articles.length,
        withImages: 0,
        withoutImages: 0,
        shortContent: 0,
        normalContent: 0,
        duplicateImages: 0
      }
    };

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const imageGroups = {};
    const titleGroups = {};

    for (let i = 0; i < articles.length; i++) {
      const article = articles[i];
      
      // –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageUrl = article.media?.featuredImage?.url;
      if (imageUrl) {
        issues.statistics.withImages++;
        
        if (!imageGroups[imageUrl]) {
          imageGroups[imageUrl] = [];
        }
        imageGroups[imageUrl].push({
          id: article._id,
          title: article.title,
          source: article.source,
          createdAt: article.createdAt
        });
      } else {
        issues.statistics.withoutImages++;
        issues.noImages.push({
          id: article._id,
          title: article.title,
          source: article.source
        });
      }

      // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const contentLength = article.content ? article.content.replace(/<[^>]*>/g, '').length : 0;
      if (contentLength < 500) {
        issues.statistics.shortContent++;
        issues.shortContent.push({
          id: article._id,
          title: article.title,
          contentLength,
          source: article.source,
          content: article.content?.substring(0, 200) + '...'
        });
      } else {
        issues.statistics.normalContent++;
      }

      // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      const titleKey = article.title.toLowerCase().trim();
      if (!titleGroups[titleKey]) {
        titleGroups[titleKey] = [];
      }
      titleGroups[titleKey].push({
        id: article._id,
        title: article.title,
        source: article.source,
        createdAt: article.createdAt
      });

      // –ê–Ω–∞–ª–∏–∑ "–ø–ª–æ—Ö–æ–≥–æ" –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      if (article.content) {
        const cleanContent = article.content.replace(/<[^>]*>/g, '').toLowerCase();
        const badPatterns = [
          'content available at link',
          '–∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ',
          'failed to load',
          'error loading',
          'access denied',
          'cloudflare',
          '403 forbidden',
          'blocked'
        ];

        const hasBadContent = badPatterns.some(pattern => cleanContent.includes(pattern));
        if (hasBadContent || contentLength < 100) {
          issues.badContent.push({
            id: article._id,
            title: article.title,
            source: article.source,
            contentLength,
            content: article.content?.substring(0, 300) + '...'
          });
        }
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for (const [imageUrl, articles] of Object.entries(imageGroups)) {
      if (articles.length > 1) {
        issues.statistics.duplicateImages += articles.length;
        issues.duplicateImages.push({
          imageUrl,
          count: articles.length,
          articles: articles
        });
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for (const [title, articles] of Object.entries(titleGroups)) {
      if (articles.length > 1) {
        issues.duplicateTitles.push({
          title,
          count: articles.length,
          articles: articles
        });
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('=' .repeat(50));
    console.log(`üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${issues.statistics.totalArticles}`);
    console.log(`üñºÔ∏è –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${issues.statistics.withImages}`);
    console.log(`‚ùå –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${issues.statistics.withoutImages}`);
    console.log(`üìù –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${issues.statistics.normalContent}`);
    console.log(`‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${issues.statistics.shortContent}`);
    console.log(`üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${issues.statistics.duplicateImages}`);

    console.log('\nüö® –ü–†–û–ë–õ–ï–ú–´:');
    console.log('=' .repeat(50));

    // –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (issues.duplicateImages.length > 0) {
      console.log(`\nüîÑ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (${issues.duplicateImages.length} –≥—Ä—É–ø–ø):`);
      issues.duplicateImages.slice(0, 5).forEach((group, index) => {
        console.log(`\n${index + 1}. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${group.count} —Ä–∞–∑:`);
        console.log(`   URL: ${group.imageUrl?.substring(0, 80)}...`);
        group.articles.forEach(article => {
          console.log(`   - ${article.title.substring(0, 60)}... (${article.source})`);
        });
      });
      if (issues.duplicateImages.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${issues.duplicateImages.length - 5} –≥—Ä—É–ø–ø`);
      }
    }

    // –°—Ç–∞—Ç—å–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (issues.noImages.length > 0) {
      console.log(`\n‚ùå –°–¢–ê–¢–¨–ò –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (${issues.noImages.length}):`);
      issues.noImages.slice(0, 10).forEach((article, index) => {
        console.log(`${index + 1}. ${article.title.substring(0, 70)}... (${article.source})`);
      });
      if (issues.noImages.length > 10) {
        console.log(`   ... –∏ –µ—â–µ ${issues.noImages.length - 10} —Å—Ç–∞—Ç–µ–π`);
      }
    }

    // –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (issues.shortContent.length > 0) {
      console.log(`\n‚ö†Ô∏è –°–¢–ê–¢–¨–ò –° –ö–û–†–û–¢–ö–ò–ú –ö–û–ù–¢–ï–ù–¢–û–ú (${issues.shortContent.length}):`);
      issues.shortContent.slice(0, 5).forEach((article, index) => {
        console.log(`${index + 1}. ${article.title.substring(0, 60)}... (${article.contentLength} —Å–∏–º–≤–æ–ª–æ–≤, ${article.source})`);
        console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç: ${article.content?.substring(0, 100)}...`);
      });
      if (issues.shortContent.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${issues.shortContent.length - 5} —Å—Ç–∞—Ç–µ–π`);
      }
    }

    // –ü–ª–æ—Ö–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (issues.badContent.length > 0) {
      console.log(`\nüö´ –°–¢–ê–¢–¨–ò –° –ü–†–û–ë–õ–ï–ú–ù–´–ú –ö–û–ù–¢–ï–ù–¢–û–ú (${issues.badContent.length}):`);
      issues.badContent.slice(0, 5).forEach((article, index) => {
        console.log(`${index + 1}. ${article.title.substring(0, 60)}... (${article.source})`);
        console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç: ${article.content?.substring(0, 150)}...`);
      });
    }

    // –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (issues.duplicateTitles.length > 0) {
      console.log(`\nüîÑ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ó–ê–ì–û–õ–û–í–ö–ò (${issues.duplicateTitles.length} –≥—Ä—É–ø–ø):`);
      issues.duplicateTitles.slice(0, 3).forEach((group, index) => {
        console.log(`\n${index + 1}. "${group.title.substring(0, 80)}..." (${group.count} —Ä–∞–∑)`);
        group.articles.forEach(article => {
          console.log(`   - ID: ${article.id} (${article.source})`);
        });
      });
    }

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('=' .repeat(50));
    
    if (issues.duplicateImages.length > 0) {
      console.log('üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
      console.log('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ –≤ RSS —Ñ–∏–¥–∞—Ö - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      console.log('   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—å—è—Ö');
      console.log('   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    }

    if (issues.shortContent.length > 0) {
      console.log('\n‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:');
      console.log('   ‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
      console.log('   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
      console.log('   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏');
    }

    if (issues.noImages.length > 0) {
      console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
      console.log('   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ meta —Ç–µ–≥–∞—Ö');
      console.log('   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ RSS —Ñ–∏–¥–æ–≤');
    }

    console.log('\nüîß –ò–°–¢–û–ß–ù–ò–ö–ò –ü–†–û–ë–õ–ï–ú:');
    const sourceStats = {};
    articles.forEach(article => {
      if (!sourceStats[article.source]) {
        sourceStats[article.source] = { total: 0, withImages: 0, shortContent: 0 };
      }
      sourceStats[article.source].total++;
      if (article.media?.featuredImage?.url) {
        sourceStats[article.source].withImages++;
      }
      const contentLength = article.content ? article.content.replace(/<[^>]*>/g, '').length : 0;
      if (contentLength < 500) {
        sourceStats[article.source].shortContent++;
      }
    });

    Object.entries(sourceStats).forEach(([source, stats]) => {
      const imagePercent = Math.round((stats.withImages / stats.total) * 100);
      const contentPercent = Math.round(((stats.total - stats.shortContent) / stats.total) * 100);
      console.log(`${source}: ${stats.total} —Å—Ç–∞—Ç–µ–π, ${imagePercent}% —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, ${contentPercent}% —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

diagnoseContentIssues(); 