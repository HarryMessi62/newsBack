const axios = require('axios');

const testUrls = [
  'http://localhost:5000/sitemap.xml',
  'http://localhost:5000/robots.txt'
];

const testHeaders = [
  { 'X-Domain-Context': 'infocryptoxcom' },
  { 'X-Domain-Context': 'ozxinfo' },
  { 'X-Domain-Context': 'crypto-modern' },
  {}
];

async function testSitemap() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sitemap —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏...\n');
  
  for (const url of testUrls) {
    console.log(`üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
    
    for (const headers of testHeaders) {
      const domainContext = headers['X-Domain-Context'] || '–±–µ–∑ –¥–æ–º–µ–Ω–∞';
      console.log(`  üåê –î–æ–º–µ–Ω: ${domainContext}`);
      
      try {
        const response = await axios.get(url, { headers });
        console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`  üìè –†–∞–∑–º–µ—Ä: ${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (url.includes('sitemap.xml')) {
          const urlCount = (response.data.match(/<url>/g) || []).length;
          console.log(`  üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –≤ sitemap: ${urlCount}`);
        }
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
      console.log('');
    }
    console.log('---\n');
  }
}

testSitemap().catch(console.error); 