const NewsParser = require('./services/newsParser');
const RSSParser = require('./services/rssParser');
const mongoose = require('mongoose');

async function compareParsers() {
  console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...\n');
  
  try {
    await mongoose.connect('mongodb://localhost:27017/backnews');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º RSS –ø–∞—Ä—Å–µ—Ä (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
    console.log('ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RSS –ü–ê–†–°–ï–†–ê (–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô):');
    console.log('=' .repeat(60));
    
    const rssParser = new RSSParser();
    const startTimeRSS = Date.now();
    
    try {
      const rssResult = await rssParser.parseRSSArticles(3);
      const endTimeRSS = Date.now();
      const rssTime = (endTimeRSS - startTimeRSS) / 1000;
      
      console.log(`‚úÖ RSS –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${rssTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã RSS –ø–∞—Ä—Å–µ—Ä–∞:`);
      console.log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${rssResult.articlesSuccess}`);
      console.log(`   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: ${rssResult.articlesFailed}`);
      console.log(`   ‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã: ${rssResult.duplicates}`);
      console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${rssResult.status}`);
      console.log(`   ‚Ä¢ –í—Ä–µ–º—è: ${rssTime.toFixed(2)}—Å`);
      
      if (rssResult.errors && rssResult.errors.length > 0) {
        console.log(`   ‚Ä¢ –û—à–∏–±–∫–∏: ${rssResult.errors.length}`);
      }
      
    } catch (error) {
      console.log(`‚ùå RSS –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
    }

    console.log('\n' + '=' .repeat(60));

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º HTML –ø–∞—Ä—Å–µ—Ä (—Ä—É—á–Ω–æ–π)
    console.log('\nüë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTML –ü–ê–†–°–ï–†–ê (–†–£–ß–ù–û–ô):');
    console.log('=' .repeat(60));
    
    const htmlParser = new NewsParser();
    await htmlParser.init();
    const startTimeHTML = Date.now();
    
    try {
      const htmlResult = await htmlParser.parseNews({ 
        count: 3, 
        manual: true, 
        useRSS: false // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º RSS
      });
      const endTimeHTML = Date.now();
      const htmlTime = (endTimeHTML - startTimeHTML) / 1000;
      
      console.log(`‚úÖ HTML –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${htmlTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã HTML –ø–∞—Ä—Å–µ—Ä–∞:`);
      console.log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${htmlResult.articlesSuccess}`);
      console.log(`   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: ${htmlResult.articlesFailed}`);
      console.log(`   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: ${htmlResult.articlesFound}`);
      console.log(`   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${htmlResult.articlesProcessed}`);
      console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${htmlResult.status}`);
      console.log(`   ‚Ä¢ –í—Ä–µ–º—è: ${htmlTime.toFixed(2)}—Å`);
      
      if (htmlResult.errors && htmlResult.errors.length > 0) {
        console.log(`   ‚Ä¢ –û—à–∏–±–∫–∏: ${htmlResult.errors.length}`);
      }
      
    } catch (error) {
      console.log(`‚ùå HTML –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
    }

    console.log('\n' + '=' .repeat(60));

    // 3. –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log('=' .repeat(60));
    
    console.log('üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –†–ê–ó–õ–ò–ß–ò–Ø:');
    console.log('');
    console.log('RSS –ü–ê–†–°–ï–† (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π):');
    console.log('  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç RSS —Ñ–∏–¥—ã –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤');
    console.log('  ‚úÖ 8 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
    console.log('  ‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞ (2-5 —Å–µ–∫—É–Ω–¥)');
    console.log('  ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞');
    console.log('  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤');
    console.log('  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–µ–π');
    console.log('  ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    console.log('  ‚ö†Ô∏è –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RSS —Ñ–∏–¥–æ–≤');
    console.log('');
    console.log('HTML –ü–ê–†–°–ï–† (–†—É—á–Ω–æ–π):');
    console.log('  ‚úÖ –ü–∞—Ä—Å–∏—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é');
    console.log('  ‚úÖ –ë–æ–ª—å—à–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º');
    console.log('  ‚úÖ –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ —Å–∞–π—Ç–∞–º–∏');
    console.log('  ‚ùå –ú–µ–¥–ª–µ–Ω–Ω–µ–µ (10-30 —Å–µ–∫—É–Ω–¥)');
    console.log('  ‚ùå –ú–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è Cloudflare');
    console.log('  ‚ùå –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤');
    console.log('  ‚ùå –û–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞ —Ä–∞–∑');

    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RSS –ø–∞—Ä—Å–µ—Ä –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã');
    console.log('  ‚Ä¢ HTML –ø–∞—Ä—Å–µ—Ä - –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤');
    console.log('  ‚Ä¢ RSS –ø–∞—Ä—Å–µ—Ä –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –∏ –±—ã—Å—Ç—Ä');
    console.log('  ‚Ä¢ HTML –ø–∞—Ä—Å–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');

    console.log('\nüìã –ù–ê–°–¢–†–û–ô–ö–ò:');
    console.log('  ‚Ä¢ –í –∞–¥–º–∏–Ω–∫–µ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RSS" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç RSS');
    console.log('  ‚Ä¢ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç RSS (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)');
    console.log('  ‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

compareParsers(); 