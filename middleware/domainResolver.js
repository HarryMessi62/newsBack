const Domain = require('../models/Domain');

/**
 * Middleware –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞
 */
const resolveDomain = async (req, res, next) => {
  try {
    let domain = null;
    
    // –ú–µ—Ç–æ–¥ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
    const domainContext = req.get('x-domain-context') || req.get('x-site-id');
    if (domainContext) {
      console.log(`üîç –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: ${domainContext}`);
      
      domain = await Domain.findOne({
        $or: [
          { 'settings.indexationKey': domainContext },
          { name: { $regex: domainContext, $options: 'i' } }
        ],
        isActive: true
      });
      
      if (domain) {
        console.log(`‚úÖ –î–æ–º–µ–Ω –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: ${domain.name} (ID: ${domain._id})`);
        req.currentDomain = domain;
        return next();
      }
    }
    
    // –ú–µ—Ç–æ–¥ 2: –ü–æ Host –∑–∞–≥–æ–ª–æ–≤–∫—É (—Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥)
    const host = req.get('host') || req.get('x-forwarded-host') || req.hostname;
    if (host && !domain) {
      const cleanHost = host.split(':')[0];
      console.log(`üåê –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–∞ –ø–æ —Ö–æ—Å—Ç—É: ${cleanHost}`);
      
      domain = await Domain.findOne({
        $or: [
          { url: { $regex: cleanHost, $options: 'i' } },
          { 'settings.aliases': { $in: [cleanHost] } }
        ],
        isActive: true
      });
      
      if (domain) {
        console.log(`‚úÖ –î–æ–º–µ–Ω –Ω–∞–π–¥–µ–Ω –ø–æ —Ö–æ—Å—Ç—É: ${domain.name} (ID: ${domain._id})`);
        req.currentDomain = domain;
        return next();
      }
    }
    
    // –ú–µ—Ç–æ–¥ 3: –ü–æ Referer/Origin
    const referer = req.get('referer') || req.get('origin');
    if (referer && !domain) {
      try {
        const url = new URL(referer);
        const pathname = url.pathname;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø—É—Ç–∏
        const domainPatterns = {
          'crypto-modern': ['crypto-modern', 'modern'],
          'crypto-light': ['crypto-light', 'light'],
          'crypto-next': ['crypto-next', 'next'],
          'crypto-slatex': ['crypto-slatex', 'slatex'],
          'news-crypto-trader': ['news-crypto-trader', 'trader']
        };
        
        let domainKey = null;
        for (const [key, patterns] of Object.entries(domainPatterns)) {
          if (patterns.some(pattern => pathname.includes(pattern) || url.hostname.includes(pattern))) {
            domainKey = key;
            break;
          }
        }
        
        if (domainKey) {
          console.log(`üîó –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–∞ –ø–æ referer: ${domainKey}`);
          
          domain = await Domain.findOne({
            'settings.indexationKey': domainKey,
            isActive: true
          });
          
          if (domain) {
            console.log(`‚úÖ –î–æ–º–µ–Ω –Ω–∞–π–¥–µ–Ω –ø–æ referer: ${domain.name} (ID: ${domain._id})`);
            req.currentDomain = domain;
            return next();
          }
        }
      } catch (urlError) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ referer: ${urlError.message}`);
      }
    }
    
    // –ú–µ—Ç–æ–¥ 4: –î–æ–º–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ ENV
    if (!domain) {
      const defaultDomainKey = process.env.DEFAULT_DOMAIN_KEY || 'crypto-modern';
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –¥–æ–º–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${defaultDomainKey}`);
      
      domain = await Domain.findOne({
        'settings.indexationKey': defaultDomainKey,
        isActive: true
      });
      
      if (domain) {
        console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ–º–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${domain.name} (ID: ${domain._id})`);
        req.currentDomain = domain;
        return next();
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if (!domain) {
      console.log(`‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. Host: ${host}, Context: ${domainContext}, Referer: ${referer}`);
      req.currentDomain = null;
    }

    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞:', error);
    req.currentDomain = null;
    next();
  }
};

module.exports = resolveDomain; 