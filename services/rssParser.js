const axios = require('axios');
const xml2js = require('xml2js');
const Article = require('../models/Article');
const ParserSettings = require('../models/ParserSettings');

class RSSParser {
  constructor() {
    this.sources = [
      {
        name: 'Decrypt',
        url: 'https://decrypt.co/feed',
        weight: 3, // –õ—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ - —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        baseUrl: 'https://decrypt.co'
      },
      {
        name: 'CoinDesk',
        url: 'https://www.coindesk.com/arc/outboundfeeds/rss/',
        weight: 3, // –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        baseUrl: 'https://www.coindesk.com'
      },
      {
        name: 'U.Today',
        url: 'https://u.today/rss',
        weight: 2,
        baseUrl: 'https://u.today'
      },
      {
        name: 'NewsBTC',
        url: 'https://www.newsbtc.com/feed/',
        weight: 2,
        baseUrl: 'https://www.newsbtc.com'
      },
      {
        name: 'BeInCrypto',
        url: 'https://beincrypto.com/feed/',
        weight: 2,
        baseUrl: 'https://beincrypto.com'
      },
      {
        name: 'CryptoPotato',
        url: 'https://cryptopotato.com/feed/',
        weight: 2,
        baseUrl: 'https://cryptopotato.com'
      },
      {
        name: 'CryptoSlate',
        url: 'https://cryptoslate.com/feed/',
        weight: 2,
        baseUrl: 'https://cryptoslate.com'
      },
      {
        name: 'CoinTelegraph',
        url: 'https://cointelegraph.com/rss',
        weight: 1, // –ü–æ–Ω–∏–∂–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        baseUrl: 'https://cointelegraph.com'
      }
    ];
    
    this.headers = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Accept': 'application/rss+xml, application/xml, text/xml',
      'Accept-Language': 'en-US,en;q=0.9',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive'
    };
  }

  async fetchRSSFeed(source) {
    try {
      console.log(`üì° –ü–æ–ª—É—á–∞–µ–º RSS —Ñ–∏–¥: ${source.name}`);
      
      const response = await axios.get(source.url, {
        headers: this.headers,
        timeout: 15000,
        maxRedirects: 5
      });

      const parser = new xml2js.Parser({
        explicitArray: false,
        ignoreAttrs: false,
        trim: true
      });

      const result = await parser.parseStringPromise(response.data);
      
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã RSS/Atom
      let items = [];
      if (result.rss && result.rss.channel && result.rss.channel.item) {
        items = Array.isArray(result.rss.channel.item) ? result.rss.channel.item : [result.rss.channel.item];
      } else if (result.feed && result.feed.entry) {
        items = Array.isArray(result.feed.entry) ? result.feed.entry : [result.feed.entry];
      }

      console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${items.length} —Å—Ç–∞—Ç–µ–π –≤ ${source.name}`);
      return { source, items };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSS ${source.name}:`, error.message);
      return { source, items: [], error: error.message };
    }
  }

  async parseRSSArticles(targetCount = 5) {
    console.log(`üéØ –¶–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å ${targetCount} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ RSS —Ñ–∏–¥–æ–≤`);
    
    const result = {
      articlesSuccess: 0,
      articlesFailed: 0,
      duplicates: 0,
      errors: [],
      startTime: new Date(),
      endTime: null,
      status: 'running'
    };

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ RSS —Ñ–∏–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const feedPromises = this.sources.map(source => this.fetchRSSFeed(source));
      const feedResults = await Promise.all(feedPromises);

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const allArticles = [];
      
      for (const feedResult of feedResults) {
        if (feedResult.items.length > 0) {
          for (const item of feedResult.items) {
            const article = this.parseRSSItem(item, feedResult.source);
            if (article) {
              allArticles.push({
                ...article,
                sourceWeight: feedResult.source.weight,
                sourceName: feedResult.source.name
              });
            }
          }
        }
      }

      console.log(`üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–æ: ${allArticles.length}`);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –¥–∞—Ç–µ
      allArticles.sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ –≤–µ—Å—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (b.sourceWeight !== a.sourceWeight) {
          return b.sourceWeight - a.sourceWeight;
        }
        // –ó–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        return new Date(b.publishedAt) - new Date(a.publishedAt);
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
      let processed = 0;
      for (const articleData of allArticles) {
        if (result.articlesSuccess >= targetCount) {
          break;
        }

        processed++;
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é ${processed}/${allArticles.length}: ${articleData.title.substring(0, 60)}...`);

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
          const existingArticle = await Article.findOne({
            $or: [
              { title: articleData.title },
              { slug: articleData.slug },
              { sourceUrl: articleData.sourceUrl }
            ]
          });

          if (existingArticle) {
            result.duplicates++;
            console.log(`‚è≠Ô∏è –î—É–±–ª–∏–∫–∞—Ç: ${articleData.title.substring(0, 60)}... (${result.duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)`);
            continue;
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          if (processed > 1) {
            await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
          const fullArticle = await this.fetchFullArticleContent(articleData);
          
          if (fullArticle && fullArticle.content) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é
            const savedArticle = await this.saveArticle(fullArticle);
            if (savedArticle) {
              result.articlesSuccess++;
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${fullArticle.title.substring(0, 60)}... (${result.articlesSuccess}/${targetCount})`);
            }
          } else {
            result.articlesFailed++;
            result.errors.push(`${articleData.title}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç`);
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: ${articleData.title.substring(0, 60)}...`);
          }

        } catch (error) {
          result.articlesFailed++;
          result.errors.push(`${articleData.title}: ${error.message}`);
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏:`, error.message);
        }
      }

      result.endTime = new Date();
      result.articlesFound = allArticles.length;
      result.articlesProcessed = processed;
      
      if (result.articlesSuccess >= targetCount) {
        result.status = 'success';
      } else if (result.articlesSuccess > 0) {
        result.status = 'partial';
      } else {
        result.status = 'failed';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–∞—Ä—Å–µ—Ä–∞
      try {
        const settings = await ParserSettings.getSettings();
        await settings.updateStats(result);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      }

      console.log(`üèÅ RSS –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.articlesSuccess}/${targetCount} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π, ${result.duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, ${result.articlesFailed} –æ—à–∏–±–æ–∫`);
      return result;

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ RSS –ø–∞—Ä—Å–µ—Ä–∞:', error);
      result.endTime = new Date();
      result.status = 'failed';
      result.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      return result;
    }
  }

  parseRSSItem(item, source) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ RSS —ç–ª–µ–º–µ–Ω—Ç–∞
      let title = item.title || '';
      let link = item.link || '';
      let description = item.description || item.summary || '';
      let pubDate = item.pubDate || item.published || item['dc:date'] || '';
      let categories = item.category || item.categories || [];

      // –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç CDATA
      if (typeof title === 'string') {
        title = title.replace(/<!\[CDATA\[(.*?)\]\]>/g, '$1').trim();
      }

      // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç HTML —Ç–µ–≥–æ–≤
      if (typeof description === 'string') {
        description = description.replace(/<!\[CDATA\[(.*?)\]\]>/g, '$1')
                                .replace(/<[^>]*>/g, '')
                                .trim();
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ RSS
      let tags = [];
      if (categories) {
        if (Array.isArray(categories)) {
          tags = categories.map(cat => {
            if (typeof cat === 'string') return cat;
            if (cat._ || cat.$?.term) return cat._ || cat.$.term;
            return cat.toString();
          }).filter(tag => tag && tag.length > 0);
        } else if (typeof categories === 'string') {
          tags = [categories];
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const baseTags = ['crypto', 'news', source.name.toLowerCase()];
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
      const contentTags = this.extractTagsFromContent(title + ' ' + description);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–≥–∏
      tags = [...new Set([...baseTags, ...tags, ...contentTags])]
        .filter(tag => tag && tag.length > 1 && tag.length < 30)
        .slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
      if (typeof link === 'object' && link.$) {
        link = link.$.href || link;
      }
      if (typeof link === 'object' && link._) {
        link = link._;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!title || !link) {
        return null;
      }

      // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const slug = title.toLowerCase()
                       .replace(/[^a-z0-9\s-]/g, '')
                       .replace(/\s+/g, '-')
                       .replace(/-+/g, '-')
                       .substring(0, 100);

      return {
        title: title.substring(0, 255),
        slug,
        excerpt: description.substring(0, 500),
        sourceUrl: link,
        publishedAt: pubDate ? new Date(pubDate) : new Date(),
        source: source.name,
        category: 'Crypto',
        status: 'published',
        tags: tags
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
      return null;
    }
  }

  extractTagsFromContent(content) {
    const cryptoTerms = [
      'bitcoin', 'btc', 'ethereum', 'eth', 'crypto', 'blockchain', 
      'defi', 'nft', 'solana', 'sol', 'cardano', 'ada', 'polkadot', 
      'dot', 'chainlink', 'link', 'binance', 'bnb', 'ripple', 'xrp',
      'dogecoin', 'doge', 'shiba', 'avalanche', 'avax', 'polygon',
      'matic', 'uniswap', 'uni', 'trading', 'investment', 'price',
      'market', 'bullish', 'bearish', 'mining', 'staking', 'yield',
      'exchange', 'wallet', 'token', 'coin', 'altcoin', 'hodl',
      'regulation', 'sec', 'etf', 'institutional', 'adoption'
    ];

    const lowerContent = content.toLowerCase();
    const foundTerms = cryptoTerms.filter(term => 
      lowerContent.includes(term) && 
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ —á–∞—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–ª–æ–≤–∞
      new RegExp(`\\b${term}\\b`).test(lowerContent)
    );

    return foundTerms.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  }

  async fetchFullArticleContent(articleData) {
    try {
      console.log(`üìÑ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${articleData.sourceUrl}`);
      
      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      const enhancedHeaders = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Cache-Control': 'max-age=0',
        'Referer': 'https://www.google.com/'
      };
      
      const response = await axios.get(articleData.sourceUrl, {
        headers: enhancedHeaders,
        timeout: 30000,
        maxRedirects: 5,
        validateStatus: function (status) {
          return status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–∂–µ 4xx –æ—à–∏–±–∫–∏
        }
      });

      const cheerio = require('cheerio');
      const $ = cheerio.load(response.data);

      let content = '';
      let featuredImage = null;

      // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
      const contentSelectors = {
        'cointelegraph.com': {
          content: '.post-content, .post__content, article .content, .article-content',
          image: '.post__lead-image img, .post-cover img, .article-image img'
        },
        'decrypt.co': {
          content: '.post-content, .article-content, [data-module="ArticleBody"]',
          image: '.featured-image img, .post-featured-image img'
        },
        'coindesk.com': {
          content: '.at-content .at-text, .articleBody, .story-body, .at-body .at-text, [data-module="ArticleBody"], .article-content, .post-content p, .entry-content p',
          image: '.featured-image img, .lead-image img, .article-hero img, .hero-image img, .at-image img'
        },
        'u.today': {
          content: '.article-body, .post-content, .content',
          image: '.article-image img, .featured-image img'
        },
        'newsbtc.com': {
          content: '.entry-content, .post-content, .article-content',
          image: '.featured-image img, .post-thumbnail img'
        },
        'beincrypto.com': {
          content: '.post-content, .article-content, .entry-content',
          image: '.featured-image img, .post-image img'
        },
        'cryptopotato.com': {
          content: '.post-content, .article-content, .entry-content',
          image: '.featured-image img, .post-thumbnail img'
        },
        'cryptoslate.com': {
          content: '.post-content, .article-content, .entry-content',
          image: '.featured-image img, .post-image img'
        }
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω
      const domain = new URL(articleData.sourceUrl).hostname;
      const selectors = contentSelectors[domain] || {
        content: '.post-content, .article-content, .entry-content, .content, article p',
        image: '.featured-image img, .post-image img, .article-image img, img[class*="featured"]'
      };

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      const contentElement = $(selectors.content).first();
      if (contentElement.length > 0) {
        // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        contentElement.find('script, style, .advertisement, .ads, .social-share, .related-posts').remove();
        content = contentElement.html() || contentElement.text();
      }

      // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      if (!content || content.length < 200) {
        console.log(`üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è ${domain}...`);
        
        const alternativeSelectors = [
          // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è CoinDesk (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ)
          '.at-content .at-text',
          '.at-body .at-text',
          '.story-body',
          '.articleBody',
          // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–µ–π
          'article .content',
          'article .text',
          'article .body',
          '.post-content',
          '.entry-content',
          '.article-content',
          // –ú–µ–Ω–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
          'article p',
          '.post p',
          '.entry p',
          'main p'
        ];

        for (const selector of alternativeSelectors) {
          let text = '';
          let html = '';
          
          if (selector.includes(' p')) {
            // –î–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            const paragraphs = $(selector);
            if (paragraphs.length > 0) {
              // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
              paragraphs.find('script, style, .advertisement, .ads, .social-share, .related-posts').remove();
              
              const validParagraphs = paragraphs.filter((i, el) => {
                const pText = $(el).text().trim();
                return pText.length > 20; // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
              });
              
              if (validParagraphs.length > 0) {
                html = validParagraphs.map((i, el) => $(el).html()).get().join('</p><p>');
                html = `<p>${html}</p>`;
                text = validParagraphs.map((i, el) => $(el).text().trim()).get().join(' ');
              }
            }
          } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            const element = $(selector);
            if (element.length > 0) {
              // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
              element.find('script, style, .advertisement, .ads, .social-share, .related-posts, nav, header, footer, .sidebar').remove();
              
              text = element.text().trim();
              html = element.html();
            }
          }
          
          if (text.length > 300) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector} (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ä–∞–∑—É
            const unwantedPatterns = [
              'TRX$', 'DOGE$', 'ADA$', 'HYPE$', 'WBT$',
              '+0.01%', '-2.12%', '-7.26%',
              'BTC$', 'ETH$', 'SOL$', 'XRP$',
              'USDC$', 'USDT$'
            ];
            
            const unwantedCount = unwantedPatterns.filter(pattern => text.includes(pattern)).length;
            if (unwantedCount > 3) {
              console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${unwantedCount} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ü–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä`);
              continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            }
            
            content = html || text;
            break;
          }
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
      let imageElement = $(selectors.image).first();
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      if (imageElement.length === 0) {
        const additionalImageSelectors = [
          'img[src*="featured"]',
          'img[src*="hero"]',
          'img[src*="banner"]',
          'img[src*="cover"]',
          'img[src*="thumb"]',
          '.hero img',
          '.banner img',
          '.cover img',
          '.thumbnail img',
          'article img:first',
          '.content img:first',
          'img[width="1200"]',
          'img[width="1434"]',
          'img[height="600"]'
        ];
        
        for (const selector of additionalImageSelectors) {
          imageElement = $(selector).first();
          if (imageElement.length > 0) break;
        }
      }
      
      if (imageElement.length > 0) {
        let imageSrc = imageElement.attr('src') || 
                      imageElement.attr('data-src') || 
                      imageElement.attr('data-lazy-src') ||
                      imageElement.attr('data-original');
        
        if (imageSrc) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
          if (imageSrc.startsWith('//')) {
            imageSrc = 'https:' + imageSrc;
          } else if (imageSrc.startsWith('/')) {
            const baseUrl = new URL(articleData.sourceUrl);
            imageSrc = baseUrl.protocol + '//' + baseUrl.host + imageSrc;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –º–∞–ª–µ–Ω—å–∫–∞—è –∏–∫–æ–Ω–∫–∞
          const width = imageElement.attr('width');
          const height = imageElement.attr('height');
          if (width && height && (parseInt(width) < 200 || parseInt(height) < 200)) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${width}x${height}`);
          } else {
            featuredImage = imageSrc;
            console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageSrc.substring(0, 80)}...`);
          }
        }
      }
      
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ meta —Ç–µ–≥–æ–≤
      if (!featuredImage) {
        const metaImage = $('meta[property="og:image"]').attr('content') ||
                         $('meta[name="twitter:image"]').attr('content') ||
                         $('meta[property="og:image:url"]').attr('content');
        
        if (metaImage) {
          featuredImage = metaImage.startsWith('//') ? 'https:' + metaImage : metaImage;
          console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ meta: ${featuredImage.substring(0, 80)}...`);
        }
      }

      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (content) {
        const originalLength = content.replace(/<[^>]*>/g, '').trim().length;
        content = content
          .replace(/<script[^>]*>.*?<\/script>/gi, '')
          .replace(/<style[^>]*>.*?<\/style>/gi, '')
          .replace(/<!--.*?-->/g, '')
          .replace(/<iframe[^>]*>.*?<\/iframe>/gi, '')
          .trim();
        
        const cleanedLength = content.replace(/<[^>]*>/g, '').trim().length;
        console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${originalLength} ‚Üí ${cleanedLength} —Å–∏–º–≤–æ–ª–æ–≤`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ
      const textContent = content.replace(/<[^>]*>/g, '').trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç CoinTelegraph –∏ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤
      const blockedPatterns = [
        'bg-charcoal-25 absolute left-0 top-0',
        'Please enable JavaScript',
        'Access denied',
        'Cloudflare',
        'Loading...',
        'Subscribe to continue',
        'Register to read'
      ];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–≤–∏–¥–∂–µ—Ç—ã, —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)
      const unwantedPatterns = [
        'TRX$', 'DOGE$', 'ADA$', 'HYPE$', 'WBT$', // –¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        '+0.01%', '-2.12%', '-7.26%', // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        'BTC$', 'ETH$', 'SOL$', 'XRP$', // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
        'USDC$', 'USDT$' // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
      ];
      
      const isBlocked = blockedPatterns.some(pattern => 
        content.toLowerCase().includes(pattern.toLowerCase())
      );
      
      const isUnwantedContent = unwantedPatterns.filter(pattern => 
        textContent.includes(pattern)
      ).length > 3; // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ 3 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ü–µ–Ω - —ç—Ç–æ –≤–∏–¥–∂–µ—Ç
      
      if (textContent.length < 200 || isBlocked || isUnwantedContent) {
        if (isUnwantedContent) {
          console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –≤–∏–¥–∂–µ—Ç —Å —Ü–µ–Ω–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—å–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ RSS`);
        }
        console.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª (${textContent.length} —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ RSS`);
        
        // –†–∞—Å—à–∏—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ RSS –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        let expandedContent = articleData.excerpt || '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if (expandedContent) {
          expandedContent = `<p><strong>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</strong></p><p>${expandedContent}</p>`;
          expandedContent += `<p><em>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ <a href="${articleData.sourceUrl}" target="_blank" rel="noopener">—Å—Å—ã–ª–∫–µ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫</a>.</em></p>`;
        } else {
          expandedContent = `<p><em>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ <a href="${articleData.sourceUrl}" target="_blank" rel="noopener">—Å—Å—ã–ª–∫–µ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫</a>.</em></p>`;
        }
        
        content = expandedContent;
      }

      return {
        ...articleData,
        content: content || articleData.excerpt || '–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ.',
        media: {
          featuredImage: featuredImage ? {
            url: featuredImage,
            alt: articleData.title,
            caption: ''
          } : null
        }
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è ${articleData.sourceUrl}:`, error.message);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ RSS
      return {
        ...articleData,
        content: articleData.excerpt || '–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ.',
        media: {
          featuredImage: null
        }
      };
    }
  }

  async saveArticle(articleData) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
      const settings = await ParserSettings.getSettings();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∞
      const Domain = require('../models/Domain');
      const User = require('../models/User');
      
      const domains = await Domain.find({ _id: { $in: settings.domains.targetDomains.map(d => d.domainId) } });
      const defaultAuthor = await User.findById(settings.publishing.defaultAuthor);
      
      if (domains.length === 0) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      }
      
      if (!defaultAuthor) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–æ–º–µ–Ω
      const selectedDomain = domains[0];
      
      // ---- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–µ–π–∫–æ–≤—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã/–ª–∞–π–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É ----
      const rangeOrDefault = (range) => {
        const min = Number(range?.min ?? 0);
        const max = Number(range?.max ?? 0);
        if (max <= min) return min;
        return Math.floor(Math.random() * (max - min + 1)) + min;
      };

      const fakeViews = rangeOrDefault(settings?.initialStats?.views);
      const fakeLikes = rangeOrDefault(settings?.initialStats?.likes);

      const article = new Article({
        title: articleData.title,
        slug: articleData.slug,
        content: articleData.content,
        excerpt: articleData.excerpt,
        category: articleData.category,
        status: 'published', // RSS —Å—Ç–∞—Ç—å–∏ –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
        author: defaultAuthor._id,
        domain: selectedDomain._id,
        isParsed: true,
        sourceUrl: articleData.sourceUrl,
        publishedAt: articleData.publishedAt,
        media: articleData.media || {},
        source: articleData.source,
        tags: articleData.tags || [],
        stats: {
          views: { fake: fakeViews, real: 0, total: fakeViews },
          likes: { fake: fakeLikes, real: 0, total: fakeLikes },
          comments: { fake: 0, real: 0, total: 0 },
          shares: { fake: 0, real: 0, total: 0 }
        }
      });

      const savedArticle = await article.save();
      return savedArticle;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
      throw error;
    }
  }
}

module.exports = RSSParser; 