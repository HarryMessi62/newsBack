const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const Article = require('../models/Article');
const Domain = require('../models/Domain');
const User = require('../models/User');
const ParserSettings = require('../models/ParserSettings');
const RSSParser = require('./rssParser');

class NewsParser {
  constructor() {
    this.settings = null;
    this.userAgents = [
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0'
    ];
    this.currentProxyIndex = 0;
    this.sessionCookies = null;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
  async init() {
    try {
      this.settings = await ParserSettings.findOne({}) || await ParserSettings.create({});
      console.log('NewsParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
  getRandomUserAgent() {
    return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  getRequestHeaders(referer = null) {
    const userAgent = this.getRandomUserAgent();
    const headers = {
      'User-Agent': userAgent,
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1',
      'Sec-Fetch-Dest': 'document',
      'Sec-Fetch-Mode': 'navigate',
      'Sec-Fetch-Site': referer ? 'same-origin' : 'none',
      'Sec-Fetch-User': '?1',
      'Cache-Control': 'max-age=0'
    };

    if (referer) {
      headers['Referer'] = referer;
    }

    if (this.sessionCookies) {
      headers['Cookie'] = this.sessionCookies;
    }

    return headers;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
  async createSession() {
    try {
      console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies
      const response = await axios.get('https://cryptonews.com/', {
        headers: this.getRequestHeaders(),
        timeout: 30000,
        maxRedirects: 5,
        validateStatus: (status) => status < 500 // –ü—Ä–∏–Ω–∏–º–∞–µ–º 4xx –∫–æ–¥—ã
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –∏–∑ –æ—Ç–≤–µ—Ç–∞
      if (response.headers['set-cookie']) {
        this.sessionCookies = response.headers['set-cookie']
          .map(cookie => cookie.split(';')[0])
          .join('; ');
        console.log('üç™ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      await this.delay(2000 + Math.random() * 3000);
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error.message);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async getArticleLinks(maxArticles = 10) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!this.sessionCookies) {
        await this.createSession();
      }

      console.log(`üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π (—Ü–µ–ª—å: ${maxArticles})...`);
      const sourceUrl = this.settings?.parser?.sourceUrl || 'https://cointelegraph.com/news';
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π
      const articleLinks = [];
      const processedUrls = new Set();
      
      // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      await this.getArticleLinksFromPage(sourceUrl, articleLinks, processedUrls, maxArticles);
      
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π, –ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (articleLinks.length < maxArticles) {
        const baseUrlObj = new URL(sourceUrl);
        const additionalPages = [
          `${sourceUrl}?page=2`,
          `${sourceUrl}?page=3`,
          `${baseUrlObj.origin}/news/latest`,
          `${baseUrlObj.origin}/news/bitcoin`,
          `${baseUrlObj.origin}/news/ethereum`,
          `${baseUrlObj.origin}/news/altcoin`,
          `${baseUrlObj.origin}/news/defi`,
          `${baseUrlObj.origin}/news/nft`,
          `${baseUrlObj.origin}/news/regulation`,
          `${baseUrlObj.origin}/news/technology`
        ];
        
        for (const pageUrl of additionalPages) {
          if (articleLinks.length >= maxArticles * 1.5) break; // –ü–æ–ª—É—á–∞–µ–º —Å –∑–∞–ø–∞—Å–æ–º
          
          try {
            await this.delay(1500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await this.getArticleLinksFromPage(pageUrl, articleLinks, processedUrls, maxArticles);
            console.log(`üìÑ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${articleLinks.length}`);
          } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageUrl}:`, error.message);
          }
        }
      }

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${articleLinks.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å–∏`);
      return articleLinks.slice(0, maxArticles);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π:', error.message);
      return [];
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async getArticleLinksFromPage(pageUrl, articleLinks, processedUrls, maxArticles) {
    try {
      const response = await axios.get(pageUrl, {
        headers: this.getRequestHeaders(pageUrl),
        timeout: this.settings?.parser?.requestTimeout || 30000,
        maxRedirects: 5,
        validateStatus: (status) => status < 500
      });

      const $ = cheerio.load(response.data);
      const baseUrl = new URL(pageUrl).origin;
      
      // –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
      const selectors = [
        // CoinTelegraph —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        'article a[href*="/news/"]', // –°—Ç–∞—Ç—å–∏ CoinTelegraph
        'a[data-testid="article-card-link"]', // CoinTelegraph –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–µ–π
        '.post-card-inline a[href*="/news/"]', // –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–æ–≤
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        'article h2 a', // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–µ–π –≤ article —Ç–µ–≥–∞—Ö
        'h2 a[href*="/news/"]', // –õ—é–±—ã–µ h2 —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
        'h3 a[href*="/news/"]', // –õ—é–±—ã–µ h3 —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
        '.post-item a[href*="/news/"]', // –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
        '.news-item a[href*="/news/"]', // –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π
        '.article-title a', // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–µ–π
        '.title a[href*="/news/"]', // –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º title
        'a[href*="/news/"][title]' // –õ—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º title
      ];

      for (const selector of selectors) {
        if (articleLinks.length >= maxArticles) break;
        
        $(selector).each((index, element) => {
          if (articleLinks.length >= maxArticles) return false;
          
          const href = $(element).attr('href');
          let title = $(element).text().trim() || 
                     $(element).attr('title') || 
                     $(element).find('span, div').first().text().trim() || '';
          
          // –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
          title = title.replace(/^\s*[\d\.\-\‚Äì\‚Äî]+\s*/, '').trim();
          
          if (href && title && title.length > 15 && href.includes('/news/')) {
            const fullUrl = href.startsWith('http') ? href : `${baseUrl}${href.startsWith('/') ? '' : '/'}${href}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é, –∞ –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const isValidArticle = fullUrl.match(/\/news\/[^\/]+\/$/) || 
                                  fullUrl.match(/\/news\/[^\/]+-\d+$/) ||
                                  fullUrl.match(/\/news\/[\w-]+$/);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å URL
            if (isValidArticle && !processedUrls.has(fullUrl)) {
              processedUrls.add(fullUrl);
              articleLinks.push({
                url: fullUrl,
                title: title.substring(0, 200),
                found_at: new Date()
              });
              console.log(`–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: ${title.substring(0, 80)}...`);
            }
          }
        });
      }

    } catch (error) {
      console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageUrl}:`, error.message);
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏
  async parseArticle(articleUrl) {
    try {
      console.log(`–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—å–∏: ${articleUrl}`);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (this.settings?.parser?.requestDelay) {
        await this.delay(this.settings.parser.requestDelay);
      }

      const response = await axios.get(articleUrl, {
        headers: this.getRequestHeaders('https://cryptonews.com/news/'),
        timeout: this.settings?.parser?.requestTimeout || 30000,
        maxRedirects: 5,
        validateStatus: (status) => status < 500
      });

      const $ = cheerio.load(response.data);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
      const title = this.extractTitle($);
      const content = await this.extractContent($, articleUrl);
      const excerpt = this.generateExcerpt(content);
      const images = await this.extractImages($, articleUrl);
      const publishDate = this.extractPublishDate($);
      const tags = this.extractTags($);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      const existingArticle = await Article.findOne({
        $or: [
          { title: title },
          { slug: this.generateSlug(title) }
        ]
      });

      if (existingArticle) {
        console.log(`–°—Ç–∞—Ç—å—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${title}`);
        return { success: false, reason: 'duplicate', title };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      if (content.length < (this.settings?.content?.minContentLength || 500)) {
        console.log(`–°—Ç–∞—Ç—å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è: ${title}`);
        return { success: false, reason: 'too_short', title };
      }

      return {
        success: true,
        data: {
          title,
          content,
          excerpt,
          images,
          publishDate,
          tags,
          sourceUrl: articleUrl
        }
      };

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—å–∏ ${articleUrl}:`, error.message);
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 403, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
      if (error.response?.status === 403) {
        console.log('üîÑ –°—Ç–∞—Ç—å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é...');
        this.sessionCookies = null;
        
        // –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
        await this.delay(3000 + Math.random() * 7000);
        
        try {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
          await this.createSession();
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
          const retryResponse = await axios.get(articleUrl, {
            headers: this.getRequestHeaders('https://cryptonews.com/news/'),
            timeout: this.settings?.parser?.requestTimeout || 30000,
            maxRedirects: 5,
            validateStatus: (status) => status < 500
          });
          
          const $ = cheerio.load(retryResponse.data);
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
          const title = this.extractTitle($);
          const content = await this.extractContent($, articleUrl);
          const excerpt = this.generateExcerpt(content);
          const images = await this.extractImages($, articleUrl);
          const publishDate = this.extractPublishDate($);
          const tags = this.extractTags($);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
          const existingArticle = await Article.findOne({
            $or: [
              { title: title },
              { slug: this.generateSlug(title) }
            ]
          });
          
          if (existingArticle) {
            console.log(`–°—Ç–∞—Ç—å—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${title}`);
            return { success: false, reason: 'duplicate', title };
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          if (content.length < (this.settings?.content?.minContentLength || 500)) {
            console.log(`–°—Ç–∞—Ç—å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è: ${title}`);
            return { success: false, reason: 'too_short', title };
          }
          
          return {
            success: true,
            data: {
              title,
              content,
              excerpt,
              images,
              publishDate,
              tags,
              sourceUrl: articleUrl
            }
          };
          
        } catch (retryError) {
          console.error(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–Ω–∞: ${retryError.message}`);
          return { success: false, reason: 'parse_error', error: retryError.message };
        }
      }
      
      return { success: false, reason: 'parse_error', error: error.message };
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  extractTitle($) {
    const selectors = [
      'h1.article-title',
      'h1.post-title', 
      'h1.entry-title',
      '.article-header h1',
      '.post-header h1',
      'h1',
      'title'
    ];

    for (const selector of selectors) {
      const title = $(selector).first().text().trim();
      if (title && title.length > 10) {
        return title.substring(0, 200);
      }
    }

    return 'Untitled Article';
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  async extractContent($, url) {
    const selectors = [
      '.article-content',
      '.post-content',
      '.entry-content',
      '.content',
      'article .text',
      '.article-body',
      '.post-body'
    ];

    let content = '';

    for (const selector of selectors) {
      const element = $(selector).first();
      if (element.length) {
        // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        element.find('script, style, .ads, .advertisement, .social-share, .related-posts').remove();
        
        content = element.html() || '';
        if (content && content.length > 200) {
          break;
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    if (!content || content.length < 200) {
      $('p').each((i, elem) => {
        const text = $(elem).text().trim();
        if (text.length > 50) {
          content += `<p>${text}</p>\n`;
        }
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    if (this.settings?.content?.saveImages) {
      content = await this.processImagesInContent(content, url);
    }

    return this.cleanContent(content);
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async extractImages($, baseUrl) {
    const images = [];
    
    if (!this.settings?.content?.saveImages) {
      return images;
    }

    const imageSelectors = [
      '.article-image img',
      '.featured-image img',
      '.post-thumbnail img',
      'article img',
      '.content img'
    ];

    for (const selector of imageSelectors) {
      $(selector).each(async (i, img) => {
        const src = $(img).attr('src') || $(img).attr('data-src');
        if (src && !src.includes('data:image')) {
          const fullUrl = src.startsWith('http') ? src : new URL(src, baseUrl).href;
          const alt = $(img).attr('alt') || '';
          
          images.push({
            url: fullUrl,
            alt: alt,
            caption: ''
          });
        }
      });
    }

    return images.slice(0, 10); // –ú–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  extractPublishDate($) {
    const selectors = [
      'time[datetime]',
      '.publish-date',
      '.post-date',
      '.article-date',
      '[data-date]'
    ];

    for (const selector of selectors) {
      const element = $(selector).first();
      if (element.length) {
        const datetime = element.attr('datetime') || element.attr('data-date') || element.text();
        const date = new Date(datetime);
        if (!isNaN(date.getTime())) {
          return date;
        }
      }
    }

    return new Date(); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
  extractTags($) {
    const tags = [];
    
    $('.tags a, .post-tags a, .article-tags a, .tag-links a').each((i, elem) => {
      const tag = $(elem).text().trim();
      if (tag && !tags.includes(tag)) {
        tags.push(tag);
      }
    });

    return tags.slice(0, 10);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async saveImage(imageUrl, articleSlug) {
    try {
      const response = await axios.get(imageUrl, {
        responseType: 'arraybuffer',
        timeout: 30000,
        headers: {
          'User-Agent': this.getRandomUserAgent(),
          'Accept': 'image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
          'Referer': 'https://cryptonews.com/'
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (response.data.length > (this.settings?.content?.maxImageSize || 5 * 1024 * 1024)) {
        console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: ${imageUrl}`);
        return null;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const extension = path.extname(new URL(imageUrl).pathname) || '.jpg';
      const filename = `${articleSlug}-${Date.now()}-${crypto.randomBytes(6).toString('hex')}${extension}`;
      
      const uploadDir = path.join(__dirname, '../uploads/images');
      const filepath = path.join(uploadDir, filename);

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await fs.mkdir(uploadDir, { recursive: true });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      await fs.writeFile(filepath, response.data);

      return {
        url: `/uploads/images/${filename}`,
        originalUrl: imageUrl
      };

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageUrl}:`, error.message);
      return null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
  async processImagesInContent(content, baseUrl) {
    const $ = cheerio.load(content);
    
    const images = $('img');
    for (let i = 0; i < images.length; i++) {
      const img = images.eq(i);
      const src = img.attr('src');
      
      if (src && !src.startsWith('data:') && !src.includes('base64')) {
        const fullUrl = src.startsWith('http') ? src : new URL(src, baseUrl).href;
        const savedImage = await this.saveImage(fullUrl, 'parsed');
        
        if (savedImage) {
          img.attr('src', savedImage.url);
        }
      }
    }
    
    return $.html();
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  cleanContent(content) {
    if (!content) return '';
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    content = content.replace(/\n\s*\n/g, '\n');
    content = content.replace(/\s+/g, ' ');
    
    // –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML
    content = content.replace(/<script[^>]*>.*?<\/script>/gi, '');
    content = content.replace(/<style[^>]*>.*?<\/style>/gi, '');
    content = content.replace(/<!--.*?-->/g, '');
    
    return content.trim();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è excerpt
  generateExcerpt(content) {
    if (!content) return '';
    
    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ excerpt
    const text = content.replace(/<[^>]*>/g, '').trim();
    const length = this.settings?.content?.excerptLength || 200;
    
    if (text.length <= length) return text;
    
    return text.substring(0, length).replace(/\s+\S*$/, '') + '...';
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug
  generateSlug(title) {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .substring(0, 100);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  async saveArticle(articleData, domainId, authorId) {
    try {
      const slug = this.generateSlug(articleData.title);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
      const media = {
        featuredImage: null,
        gallery: []
      };

      if (articleData.images && articleData.images.length > 0) {
        // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ featured
        if (articleData.images[0]) {
          const savedImage = await this.saveImage(articleData.images[0].url, slug);
          if (savedImage) {
            media.featuredImage = {
              url: savedImage.url,
              alt: articleData.images[0].alt || articleData.title,
              caption: articleData.images[0].caption || ''
            };
          }
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –≥–∞–ª–µ—Ä–µ—é
        if (articleData.images.length > 1) {
          for (let i = 1; i < Math.min(articleData.images.length, 6); i++) {
            const savedImage = await this.saveImage(articleData.images[i].url, slug);
            if (savedImage) {
              media.gallery.push({
                url: savedImage.url,
                alt: articleData.images[i].alt || '',
                caption: articleData.images[i].caption || '',
                position: i
              });
            }
          }
        }
      }

      // ---- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–µ–π–∫–æ–≤—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã/–ª–∞–π–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É ----
      const rangeOrDefault = (range) => {
        const min = Number(range?.min ?? 0);
        const max = Number(range?.max ?? 0);
        if (max <= min) return min;
        return Math.floor(Math.random() * (max - min + 1)) + min;
      };

      const fakeViews = rangeOrDefault(this.settings?.initialStats?.views);
      const fakeLikes = rangeOrDefault(this.settings?.initialStats?.likes);

      const article = new Article({
        title: articleData.title,
        slug: slug,
        content: articleData.content,
        excerpt: articleData.excerpt,
        media: media,
        category: this.settings?.publishing?.defaultCategory || 'Crypto',
        tags: articleData.tags || this.settings?.publishing?.defaultTags || [],
        status: this.settings?.publishing?.defaultStatus || 'draft',
        publishedAt: this.settings?.publishing?.autoPublish ? new Date() : null,
        author: authorId,
        domain: domainId,
        stats: {
          views: { fake: fakeViews, real: 0, total: fakeViews },
          likes: { fake: fakeLikes, real: 0, total: fakeLikes },
          comments: { fake: 0, real: 0, total: 0 },
          shares: { fake: 0, real: 0, total: 0 }
        },
        seo: {
          metaTitle: articleData.title,
          metaDescription: articleData.excerpt,
          keywords: articleData.tags || []
        }
      });

      await article.save();
      console.log(`–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${articleData.title}`);
      
      return { success: true, article };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
      return { success: false, error: error.message };
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
  async parseNews(options = {}) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RSS –ø–∞—Ä—Å–µ—Ä
    if (options.useRSS || this.settings?.parser?.useRSS) {
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º RSS –ø–∞—Ä—Å–µ—Ä...');
      const rssParser = new RSSParser();
      return await rssParser.parseRSSArticles(options.count || this.settings.parser.articlesPerRun);
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π HTML –ø–∞—Ä—Å–∏–Ω–≥
    const startTime = new Date();
    const result = {
      startTime,
      endTime: null,
      articlesFound: 0,
      articlesProcessed: 0,
      articlesSuccess: 0,
      articlesFailed: 0,
      errors: [],
      status: 'success'
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (!this.settings) {
        await this.init();
      }

      if (!this.settings.parser.enabled && !options.manual) {
        throw new Error('–ü–∞—Ä—Å–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω');
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –∏ –∞–≤—Ç–æ—Ä–∞
      const domains = await Domain.find({ _id: { $in: this.settings.domains.targetDomains.map(d => d.domainId) } });
      const defaultAuthor = await User.findById(this.settings.publishing.defaultAuthor);

      if (domains.length === 0) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      }

      if (!defaultAuthor) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
      const targetArticles = options.count || this.settings.parser.articlesPerRun;
      let duplicateCount = 0;
      let processedUrls = new Set();
      let currentBatchSize = Math.max(targetArticles * 2, 15); // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      let maxIterations = 5; // –ú–∞–∫—Å–∏–º—É–º 5 –∏—Ç–µ—Ä–∞—Ü–∏–π –ø–æ–∏—Å–∫–∞
      let iteration = 0;

      console.log(`üéØ –¶–µ–ª—å: –Ω–∞–π—Ç–∏ ${targetArticles} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π`);

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º —Ü–µ–ª–∏
      while (result.articlesSuccess < targetArticles && iteration < maxIterations) {
        iteration++;
        console.log(`\nüîç –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration}: –∏—â–µ–º ${currentBatchSize} —Å—Ç–∞—Ç–µ–π...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é —Å—Ç–∞—Ç–µ–π
        const articleLinks = await this.getArticleLinks(currentBatchSize);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL
        const newLinks = articleLinks.filter(link => !processedUrls.has(link.url));
        
        if (newLinks.length === 0) {
          console.log(`‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iteration}`);
          currentBatchSize += 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
          continue;
        }
        
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${newLinks.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        result.articlesFound += newLinks.length;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
        for (const link of newLinks) {
          // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
          if (result.articlesSuccess >= targetArticles) {
            console.log(`üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π!`);
            break;
          }

          processedUrls.add(link.url);

          try {
            result.articlesProcessed++;
            
            const parseResult = await this.parseArticle(link.url);
            
            if (parseResult.success) {
              // –í—ã–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
              const domain = this.selectDomain(domains);
              
              const saveResult = await this.saveArticle(
                parseResult.data,
                domain._id,
                defaultAuthor._id
              );

              if (saveResult.success) {
                result.articlesSuccess++;
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–∞: ${parseResult.data.title.substring(0, 60)}... (${result.articlesSuccess}/${targetArticles})`);
              } else {
                result.articlesFailed++;
                result.errors.push(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${saveResult.error}`);
              }
            } else {
              // –°—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–µ –∫–∞–∫ –æ—à–∏–±–∫–∏)
              if (parseResult.reason === 'duplicate') {
                duplicateCount++;
                console.log(`‚è≠Ô∏è –î—É–±–ª–∏–∫–∞—Ç: ${parseResult.title.substring(0, 60)}... (${duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)`);
                // –î—É–±–ª–∏–∫–∞—Ç—ã –ù–ï —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
              } else {
                // –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ
                result.articlesFailed++;
                result.errors.push(`${link.title}: ${parseResult.reason}`);
              }
            }

          } catch (error) {
            result.articlesFailed++;
            result.errors.push(`${link.url}: ${error.message}`);
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ ${link.url}:`, error);
          }
        }

        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        if (result.articlesSuccess >= targetArticles) {
          break;
        }

        // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
        const successRate = result.articlesSuccess / Math.max(result.articlesProcessed, 1);
        if (successRate < 0.3) { // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–µ–Ω—å—à–µ 30%
          currentBatchSize = Math.min(currentBatchSize + 15, 50); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
          console.log(`üìà –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (${(successRate * 100).toFixed(1)}%), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–æ ${currentBatchSize}`);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        if (iteration < maxIterations) {
          await this.delay(2000);
        }
      }

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      if (result.articlesSuccess < targetArticles) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏: ${result.articlesSuccess}/${targetArticles} —Å—Ç–∞—Ç–µ–π –ø–æ—Å–ª–µ ${iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, ${result.articlesProcessed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
      } else {
        console.log(`üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ${result.articlesSuccess}/${targetArticles} —Å—Ç–∞—Ç–µ–π!`);
      }

      result.endTime = new Date();
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: —É—Å–ø–µ—Ö –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
      if (result.articlesSuccess >= targetArticles) {
        result.status = 'success';
      } else if (result.articlesSuccess > 0) {
        result.status = 'partial';
      } else {
        result.status = 'failed';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.settings.updateStats(result);

      console.log(`üèÅ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.articlesSuccess}/${targetArticles} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π, ${duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, ${result.articlesFailed} –æ—à–∏–±–æ–∫`);
      return result;

    } catch (error) {
      result.endTime = new Date();
      result.status = 'failed';
      result.errors.push(error.message);
      
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      
      if (this.settings) {
        await this.settings.updateStats(result);
      }
      
      throw error;
    }
  }

  // –í—ã–±–æ—Ä –¥–æ–º–µ–Ω–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  selectDomain(domains) {
    if (domains.length === 1) return domains[0];

    const strategy = this.settings?.domains?.distributionStrategy || 'round_robin';
    
    switch (strategy) {
      case 'random':
        return domains[Math.floor(Math.random() * domains.length)];
      
      case 'weighted':
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        const totalWeight = this.settings.domains.targetDomains.reduce((sum, d) => sum + d.weight, 0);
        let random = Math.random() * totalWeight;
        
        for (const domainConfig of this.settings.domains.targetDomains) {
          random -= domainConfig.weight;
          if (random <= 0) {
            return domains.find(d => d._id.toString() === domainConfig.domainId.toString());
          }
        }
        break;
        
      default: // round_robin
        const index = (this.settings.stats.totalSuccess || 0) % domains.length;
        return domains[index];
    }
    
    return domains[0];
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
  static async shouldRun() {
    try {
      const settings = await ParserSettings.findOne({});
      if (!settings || !settings.parser.enabled) return false;
      
      if (!settings.stats.nextRunAt) return true;
      
      return new Date() >= settings.stats.nextRunAt;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error);
      return false;
    }
  }
}

module.exports = NewsParser; 