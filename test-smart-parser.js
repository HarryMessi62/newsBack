const NewsParser = require('./services/newsParser');
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/backnews');

async function testSmartParser() {
  try {
    const parser = new NewsParser();
    await parser.init();
    
    console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ç–∏–≤ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    console.log('üéØ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 5 –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π');
    
    const result = await parser.parseNews({ count: 5, manual: true });
    
    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: ${result.articlesSuccess} —Å—Ç–∞—Ç–µ–π`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${result.articlesFailed}`);
    console.log(`üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.articlesProcessed}`);
    console.log(`üì∞ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${result.articlesFound}`);
    console.log(`üìù –°—Ç–∞—Ç—É—Å: ${result.status}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round((result.endTime - result.startTime) / 1000)} —Å–µ–∫—É–Ω–¥`);
    
    if (result.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã:');
      const duplicates = result.errors.filter(error => error.includes('duplicate')).length;
      const otherErrors = result.errors.length - duplicates;
      console.log(`  üìã –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates}`);
      console.log(`  ‚ö†Ô∏è –î—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫: ${otherErrors}`);
      
      if (otherErrors > 0) {
        console.log('\n  –î–µ—Ç–∞–ª–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫:');
        result.errors.filter(error => !error.includes('duplicate')).forEach(error => {
          console.log(`    - ${error}`);
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
    if (result.articlesSuccess >= 5) {
      console.log('\nüéâ –£–°–ü–ï–•! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ - –Ω–∞–π–¥–µ–Ω–æ 5 –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π!');
    } else {
      console.log(`\n‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${result.articlesSuccess} –∏–∑ 5 —Å—Ç–∞—Ç–µ–π.`);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

testSmartParser(); 