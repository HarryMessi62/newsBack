const express = require('express');
const router = express.Router();
const Article = require('../models/Article');
const Domain = require('../models/Domain');

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä sitemap
const generateSitemap = (articles, baseUrl, listPagesXml = '') => {
  const urls = articles.map(article => {
    const lastmod = article.updatedAt ? article.updatedAt.toISOString() : article.publishedAt.toISOString();
    const priority = getPriority(article);
    
    return `  <url>
    <loc>${baseUrl}/article/${article.slug}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>${priority}</priority>
  </url>`;
  }).join('\n');

  return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>${baseUrl}</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>${baseUrl}/articles</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
${listPagesXml}
${urls}
</urlset>`;
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const getPriority = (article) => {
  const now = new Date();
  const publishedAt = new Date(article.publishedAt);
  const daysDiff = (now - publishedAt) / (1000 * 60 * 60 * 24);
  
  // –ë–æ–ª–µ–µ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  if (daysDiff < 7) return '0.9';
  if (daysDiff < 30) return '0.8';
  if (daysDiff < 90) return '0.7';
  return '0.6';
};

// –†–æ—É—Ç –¥–ª—è sitemap.xml
router.get('/sitemap.xml', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const host = 'infocryptox.com'
    const protocol = 'https'
    const baseUrl = `${protocol}://${host}`;
    
    console.log(`üó∫Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è sitemap –¥–ª—è –¥–æ–º–µ–Ω–∞: ${baseUrl}`);
    
    // –ò—â–µ–º –¥–æ–º–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let domain = await Domain.findOne({ 
      $or: [
        { url: baseUrl },
        { url: `${baseUrl}/` },
        { url: host },
        { name: host }
      ]
    });
    
    // –ï—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
    if (!domain) {
      console.log(`‚ö†Ô∏è –î–æ–º–µ–Ω ${host} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏`);
      domain = null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
    let query = { 
      status: 'published',
      publishedAt: { $lte: new Date() },
      isParsed: { $ne: true }
    };
    
    if (domain) {
      query.domain = domain._id;
    }
    
    const PER_PAGE = 12; // –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ñ—Ä–æ–Ω—Ç–æ–º

    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalArticles = await Article.countDocuments(query);
    const totalPages = Math.ceil(totalArticles / PER_PAGE);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤ 5000 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    const articles = await Article.find(query)
      .select('slug title publishedAt updatedAt category')
      .sort({ publishedAt: -1 })
      .limit(5000);

    // –§–æ—Ä–º–∏—Ä—É–µ–º XML –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π (–ø–µ—Ä–≤–∞—è /articles —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã—à–µ)
    let listPagesXml = '';
    for (let p = 2; p <= totalPages; p++) {
      listPagesXml += `  <url>\n    <loc>${baseUrl}/articles?page=${p}</loc>\n    <lastmod>${new Date().toISOString()}</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>0.9</priority>\n  </url>\n`;
    }
    
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è sitemap`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sitemap
    const sitemap = generateSitemap(articles, baseUrl, listPagesXml);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.set({
      'Content-Type': 'application/xml; charset=utf-8',
      'Cache-Control': 'public, max-age=3600', // –ö—ç—à –Ω–∞ 1 —á–∞—Å
      'X-Robots-Tag': 'index, follow'
    });
    
    res.send(sitemap);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap:', error);
    res.status(500).send(`<?xml version="1.0" encoding="UTF-8"?>
<error>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap: ${error.message}</error>`);
  }
});

// –†–æ—É—Ç –¥–ª—è robots.txt
router.get('/robots.txt', async (req, res) => {
  try {
    const host = 'infocryptox.com';
    const protocol = 'https'
    const baseUrl = `${protocol}://${host}`;
    
    const robotsTxt = `User-agent: *
Allow: /
Disallow: /admin
Disallow: /uploads

Sitemap: ${baseUrl}/sitemap.xml

# Crawl-delay –¥–ª—è –≤–µ–∂–ª–∏–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
Crawl-delay: 1`;

    res.set({
      'Content-Type': 'text/plain; charset=utf-8',
      'Cache-Control': 'public, max-age=3600' // –ö—ç—à –Ω–∞ 24 —á–∞—Å–∞
    });
    
    res.send(robotsTxt);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ robots.txt:', error);
    res.status(500).send('Error generating robots.txt');
  }
});

module.exports = router; 