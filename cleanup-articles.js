const mongoose = require('mongoose');
const Article = require('./models/Article');
const ParserSettings = require('./models/ParserSettings');
const Comment = require('./models/Comment');
const Like = require('./models/Like');
const fs = require('fs').promises;
const path = require('path');

async function cleanupArticlesAndHistory() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...');
    await mongoose.connect('mongodb://localhost:27017/backnews');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    console.log('\nüßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...');

    // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    console.log('\nüì∞ –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏...');
    const articlesCount = await Article.countDocuments();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${articlesCount}`);
    
    if (articlesCount > 0) {
      const deleteResult = await Article.deleteMany({});
      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${deleteResult.deletedCount}`);
    } else {
      console.log('   ‚ÑπÔ∏è –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    console.log('\nüí¨ –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...');
    const commentsCount = await Comment.countDocuments();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${commentsCount}`);
    
    if (commentsCount > 0) {
      const deleteCommentsResult = await Comment.deleteMany({});
      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${deleteCommentsResult.deletedCount}`);
    } else {
      console.log('   ‚ÑπÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∞–π–∫–∏
    console.log('\nüëç –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∞–π–∫–∏...');
    const likesCount = await Like.countDocuments();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ª–∞–π–∫–æ–≤: ${likesCount}`);
    
    if (likesCount > 0) {
      const deleteLikesResult = await Like.deleteMany({});
      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: ${deleteLikesResult.deletedCount}`);
    } else {
      console.log('   ‚ÑπÔ∏è –õ–∞–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 4. –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–∞—Ä—Å–µ—Ä–∞...');
    const settings = await ParserSettings.findOne({});
    
    if (settings) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      settings.stats.totalParsed = 0;
      settings.stats.totalSuccess = 0;
      settings.stats.totalFailed = 0;
      settings.stats.lastRunAt = null;
      settings.stats.runHistory = [];
      
      await settings.save();
      console.log('   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –æ—á–∏—â–µ–Ω–∞');
      console.log('   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    } else {
      console.log('   ‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 5. –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('\nüñºÔ∏è –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const uploadsPath = path.join(__dirname, 'uploads', 'images');
    
    try {
      const files = await fs.readdir(uploadsPath);
      const imageFiles = files.filter(file => 
        file.endsWith('.jpg') || 
        file.endsWith('.jpeg') || 
        file.endsWith('.png') || 
        file.endsWith('.webp') ||
        file.endsWith('.gif')
      );
      
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}`);
      
      if (imageFiles.length > 0) {
        for (const file of imageFiles) {
          await fs.unlink(path.join(uploadsPath, file));
        }
        console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}`);
      } else {
        console.log('   ‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.log('   ‚ÑπÔ∏è –ü–∞–ø–∫–∞ uploads/images –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${error.message}`);
      }
    }

    // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
    const finalArticlesCount = await Article.countDocuments();
    const finalCommentsCount = await Comment.countDocuments();
    const finalLikesCount = await Like.countDocuments();
    
    console.log(`   üì∞ –°—Ç–∞—Ç–µ–π: ${finalArticlesCount}`);
    console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${finalCommentsCount}`);
    console.log(`   üëç –õ–∞–π–∫–æ–≤: ${finalLikesCount}`);

    const finalSettings = await ParserSettings.findOne({});
    if (finalSettings) {
      console.log(`   üìä –ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Å–µ—Ä–∞: ${finalSettings.stats.runHistory.length} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`   üî¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${finalSettings.stats.totalParsed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    }

    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–µ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ:');
console.log('   ‚Ä¢ –í—Å–µ —Å—Ç–∞—Ç—å–∏');
console.log('   ‚Ä¢ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
console.log('   ‚Ä¢ –í—Å–µ –ª–∞–π–∫–∏');
console.log('   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é –ø–∞—Ä—Å–µ—Ä–∞');
console.log('   ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
console.log('\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?');
console.log('   –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node cleanup-articles.js --confirm');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
if (process.argv.includes('--confirm')) {
  cleanupArticlesAndHistory();
} else {
  console.log('\nüõë –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --confirm –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.');
} 